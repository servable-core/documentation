"use strict";(self.webpackChunkservable=self.webpackChunkservable||[]).push([[9591],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function p(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?p(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},p=Object.keys(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),s=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,p=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||p;return r?t.createElement(f,o(o({ref:n},c),{},{components:r})):t.createElement(f,o({ref:n},c))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var p=r.length,o=new Array(p);o[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<p;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},31200:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>p,metadata:()=>l,toc:()=>s});var t=r(87462),a=(r(67294),r(3905));const p={sidebar_position:2},o="$ servable app",l={unversionedId:"reference/commands/app",id:"reference/commands/app",title:"$ servable app",description:"Create a new app",source:"@site/docs/reference/commands/app.mdx",sourceDirName:"reference/commands",slug:"/reference/commands/app",permalink:"/documentation/docs/next/reference/commands/app",draft:!1,editUrl:"https://github.com/servable-community/generator-servable/tree/main/packages/create-docusaurus/templates/shared/docs/reference/commands/app.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"$ servable auth",permalink:"/documentation/docs/next/reference/commands/auth"},next:{title:"Packages",permalink:"/documentation/docs/next/reference/packages"}},i={},s=[{value:"Create a new app",id:"create-a-new-app",level:2},{value:"Options",id:"options",level:3},{value:"Example",id:"example",level:3},{value:"Help",id:"help",level:3}],c={toc:s},u="wrapper";function d(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-servable-app"},"$ servable app"),(0,a.kt)("h2",{id:"create-a-new-app"},"Create a new app"),(0,a.kt)("p",null,"Creates a new servable app and installs dependencies."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"servable app new\n")),(0,a.kt)("h3",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  -n, --appName              App name                                                      [string] [default: "MyAppName"]\n      --appDescription       App description                                          [string] [default: "A Servable service"]\n      --bridgeframeworkId    Engine to use                  [string] [default: "@servable/parse-server-engine"]\n  -i, --installDependencies  Install dependencies                                                [boolean] [default: true]\n  -l, --license              License                                                             [string] [default: "MIT"]\n  -p, --packageManager       Package manager (\'npm\', \'yarn\' or \'pnpm\')                           [string] [default: "npm"]\n  -g, --gitInit              Initialize a git repository                                         [boolean] [default: true]\n  -d, --destination          Choose a destination                                                                 [string]\n      --appPort              App port                                                             [number] [default: 1387]  \n')),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"servable app new --appName='MyApp' --adapter='@servable/cli'\n")),(0,a.kt)("h3",{id:"help"},"Help"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"servable app -h\n")))}d.isMDXComponent=!0}}]);