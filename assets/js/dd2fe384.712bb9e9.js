"use strict";(self.webpackChunkservable=self.webpackChunkservable||[]).push([[3352],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),h=a,d=u["".concat(c,".").concat(h)]||u[h]||m[h]||o;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},33954:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:5},s="How Servable server orchestrates a service?",i={unversionedId:"concepts/orchestration",id:"version-1.2/concepts/orchestration",title:"How Servable server orchestrates a service?",description:"Schema",source:"@site/versioned_docs/version-1.2/concepts/orchestration.md",sourceDirName:"concepts",slug:"/concepts/orchestration",permalink:"/docs/concepts/orchestration",draft:!1,editUrl:"https://github.com/servable-community/generator-servable/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.2/concepts/orchestration.md",tags:[],version:"1.2",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"What does an engine do?",permalink:"/docs/concepts/engines"},next:{title:"Guides",permalink:"/docs/category/guides"}},c={},l=[{value:"Schema",id:"schema",level:2},{value:"Final schema",id:"final-schema",level:3},{value:"Lifecycle",id:"lifecycle",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-servable-server-orchestrates-a-service"},"How Servable server orchestrates a service?"),(0,a.kt)("h2",{id:"schema"},"Schema"),(0,a.kt)("p",null,"Servable takes the separation of concerns to the extreme by allowing every protocol to define a schema it needs to run. This schema has two main entries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"target: how does the protocol change the targetted model's schema, ie, which field to add"),(0,a.kt)("li",{parentName:"ul"},"managed: the models the protocol needs to run")),(0,a.kt)("h3",{id:"final-schema"},"Final schema"),(0,a.kt)("p",null,"At runtime the Servable server computes the total schema for the whole app based on the multiple protocols that are called."),(0,a.kt)("h2",{id:"lifecycle"},"Lifecycle"),(0,a.kt)("p",null,"When the server is launched, the servable-engine performs the following tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Launches an Express app"),(0,a.kt)("li",{parentName:"ul"},"Computes the target database schema by aggregating the custom app tables and the protocols applied to those tables"),(0,a.kt)("li",{parentName:"ul"},"Checks if a schema migration is necessary. It migrates the schema or not accordingly"),(0,a.kt)("li",{parentName:"ul"},"Binds every protocol to the events triggered by the tables that use them"),(0,a.kt)("li",{parentName:"ul"},"Exposes every protocol custom function"),(0,a.kt)("li",{parentName:"ul"},"Registers jobs")),(0,a.kt)("mermaid",{value:"%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#fff',\n      'primaryTextColor': '#323232',\n      'primaryBorderColor': '#323232',\n      'lineColor': '#323232',\n      'fontFamily': 'Space Grotesk',\n      'fontSize': '14px'\n    }\n  }\n}%%\ngraph TD\n    A(Start) --\x3e buildSchema(Compute schema)\n    buildSchema --\x3e launchExpressApp(Launch Express App)\n    launchExpressApp --\x3e beforeInit(Before init)\n    beforeInit --\x3e registerModels(Register models)\n    registerModels --\x3e wireSchema(Wire schema)    \n    wireSchema --\x3e seed(Seed)        \n    seed --\x3e config(Setup config)\n    config --\x3e afterInit(After init)\n    afterInit --\x3e B(App launched)"}))}m.isMDXComponent=!0}}]);